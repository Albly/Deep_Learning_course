[1mdiff --git a/.gitignore b/.gitignore[m
[1mnew file mode 100644[m
[1mindex 0000000..52857b9[m
[1m--- /dev/null[m
[1m+++ b/.gitignore[m
[36m@@ -0,0 +1,8 @@[m
[32m+[m[32m*.zip[m
[32m+[m[32m!spec/*.zip[m
[32m+[m[32mtiny-imagenet-2020/*[m
[32m+[m[32mtiny-imagenet-200[m
[32m+[m[32m*.pt[m
[32m+[m[32m.ipynb_checkpoints[m
[32m+[m[32m__pycache__[m
[32m+[m[32mwandb[m
\ No newline at end of file[m
[1mdiff --git a/Part 1.ipynb b/Part 1.ipynb[m
[1mindex cf06ea9..ea350d2 100644[m
[1m--- a/Part 1.ipynb[m	
[1m+++ b/Part 1.ipynb[m	
[36m@@ -1 +1,510 @@[m
[31m-{"nbformat":4,"nbformat_minor":0,"metadata":{"kernelspec":{"display_name":"Python 3","language":"python","name":"python3"},"language_info":{"codemirror_mode":{"name":"ipython","version":3},"file_extension":".py","mimetype":"text/x-python","name":"python","nbconvert_exporter":"python","pygments_lexer":"ipython3","version":"3.6.9"},"colab":{"name":"Part 1.ipynb","provenance":[],"collapsed_sections":[]}},"cells":[{"cell_type":"markdown","metadata":{"id":"YJWxXWJlFHfk"},"source":["# Homework 2\n","\n","This assignment is to help you get used to PyTorch (and to improve your googling skills).\n","\n","If this is your first PyTorch experience, you may want to [start here](https://pytorch.org/tutorials/).\n","\n","While learning PyTorch, you will have lots of questions, like\n","\n","* how to choose between `.sqrt()` and `.sqrt_()`,\n","* when to use `.view()` and how is it different from `.reshape()`,\n","* which `dtype` to use etc.\n","\n","To find the answers, you are expected to google a lot and to refer to [documentation](https://pytorch.org/docs/stable/index.html). Quick documentation on functions and modules is available with `?` and `help()`, like so:\n","\n","```python\n","help(torch.sqrt)\n","```\n","\n","```python\n","# to close the help bar, press `Esc` or `q`\n","?torch.cat\n","```\n","\n","In this assignment, <font color=\"red\">**you are NOT ALLOWED to:**</font>\n","* use NumPy, SciPy or any other tensor library except PyTorch;\n","* emulate PyTorch tensors (that are used for large arrays of numbers) with lists or tuples;\n","* emulate any tensor functionality with other libraries/loops/indexing if it's directly native to PyTorch. Example:\n","\n","```python\n","x = torch.rand(1_000_000)\n","\n","# Wrong: slow and unreadable\n","for idx in range(x.numel()):\n","    x[idx] = math.sqrt(x[idx])\n","\n","# Correct\n","x.sqrt_()\n","```"]},{"cell_type":"markdown","metadata":{"id":"TWSHyGLvFHfl"},"source":["## Part 1 (40 points total)\n","\n","**In this part only**, you are <font color=\"red\">**NOT ALLOWED**</font> to use any PyTorch submodules, including\n","* `torch.nn`,\n","* `torch.nn.functional` (in general, try to always avoid using it),\n","* `torch.optim`,\n","* `torch.utils.data`,\n","* `torch.distributions`...\n","\n","Instead, use only PyTorch core functions, such as `torch.avg_pool1d(x)`, `torch.conv2d` or `torch.no_grad()`. Where possible, use special operators syntax (e.g. `x @ y`, `x += 17`, `x[None]`) or tensor methods (e.g. `x.to(y)`, `x.relu()`, `x.copy_(y)`).\n","\n","<br>\n","\n","**FAQ**\n","\n","<details>\n","<summary><i>Hey look what's wrong with <code>torch.nn.functional</code>? I've always used it! It's in all the tutorials!</i></summary>\n","<ul>\n","<li>A huge portion of its functions are in PyTorch core. For example, there are <code>torch.max_pool1d_with_indices</code>, <code>torch.pdist</code>, <code>torch.batch_norm</code> etc.\n","<li>Many parts of it, like <code>torch.nn.functional.tanh</code>, are explicitly deprecated.\n","<li>In general, given the tendency of migrating <code>torch.nn.functional.*</code> into <code>torch.*</code>, I have a strong impression that they will soon deprecate the whole submodule (but that's just my hypothesis).\n","<li><a href=\"https://discuss.pytorch.org/t/how-to-choose-between-torch-nn-functional-and-torch-nn-module/2800\">It's a</a> frequent <a href=\"https://www.reddit.com/r/pytorch/comments/afy3rt/torchnnfunctional/\">source</a> of <a href=\"https://discuss.pytorch.org/t/whats-the-difference-between-torch-nn-functional-and-torch-nn/681\">confusion</a>, especially for newbies.\n","<li>It clutters the code. <code>x.softmax()</code> and <code>torch.softmax(x)</code> are better than <code>torch.nn.functional.softmax(x)</code> and <code>F.softmax(x)</code>.\n","</ul>\n","\n","Though I have to admit you can't avoid it at all, e.g. there are unique <code>torch.nn.functional.triplet_margin_loss</code> and <code>torch.nn.functional.softmin</code>. But in this assignment, you can. ðŸ˜‰\n","</details>\n"]},{"cell_type":"code","metadata":{"id":"cvVEGPdPFHf4"},"source":["# Determine the locations of auxiliary libraries and datasets.\n","# `AUX_DATA_ROOT` is where 'notmnist.py', 'animation.py' and 'tiny-imagenet-2020.zip' are.\n","\n","# Detect if we are in Google Colaboratory\n","try:\n","    import google.colab\n","    IN_COLAB = True\n","except ImportError:\n","    IN_COLAB = False\n","\n","from pathlib import Path\n","if IN_COLAB:\n","    google.colab.drive.mount(\"/content/drive\")\n","    \n","    # Change this if you created the shortcut in a different location\n","    AUX_DATA_ROOT = Path(\"/content/drive/My Drive/Deep Learning 2021 -- Home Assignment 2\")\n","    \n","    assert AUX_DATA_ROOT.is_dir(), \"Have you forgot to 'Add a shortcut to Drive'?\"\n","    \n","    import sys\n","    sys.path.append(str(AUX_DATA_ROOT))\n","else:\n","    AUX_DATA_ROOT = Path(\".\")"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"gfwKfy9OdubD"},"source":["# Imports\n","\n","# 1. Libraries\n","import torch\n","import numpy as np               # results verification during grading\n","\n","import matplotlib.pyplot as plt  # 2D plot in task 1\n","%matplotlib inline\n","\n","# 2. Extra custom code for this assignment\n","from animation import Animation              # animations in task 2\n","# if animations don't work, try uncommenting this line:\n","from animation import AnimationMJPG as Animation\n","from notmnist import load_notmnist           # dataset for task 3\n","\n","# 3. Your solution\n","%load_ext autoreload\n","%autoreload 1\n","\n","%aimport part1_solution"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"043KDbWVFHgT"},"source":["### Task 1 (3 points)\n","\n","$\\rho(\\theta)$ is defined in the polar coordinate system:\n","\n","$$\\rho(\\theta) = (1 + 0.9 \\cdot \\cos{8\\theta} ) \\cdot (1 + 0.1 \\cdot \\cos{24\\theta}) \\cdot (0.9 + 0.05 \\cdot \\cos {200\\theta}) \\cdot (1 + \\sin{\\theta})$$\n","\n","1. Create a **64-bit floating point** regular grid of 1000 values of $\\theta$ between $-\\pi$ and $\\pi$.\n","2. Compute $\\rho(\\theta)$ at these points.\n","3. Convert the result into Cartesian coordinates ([see here how](http://www.mathsisfun.com/polar-cartesian-coordinates.html))."]},{"cell_type":"code","metadata":{"id":"iWhKZT6zFHgV"},"source":["x, y = part1_solution.get_rho()"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"nyGT0_y8FHga"},"source":["# Run this cell and make sure the plot is correct\n","plt.figure(figsize=(6,6))\n","plt.fill(x, y, color='green')\n","plt.grid()"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"NRQuLaygFHgf"},"source":["assert \\\n","    np.allclose(x.sum(), -1.9854999999997989, atol=1e-4) and \\\n","    np.allclose(y.mean(), 0.44955, atol=1e-4), \\\n","    \"Task 1: you've made an error somewhere\"\n","print(\"Task 1: well done!\")"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"Dwk1jMA7FHgj"},"source":["### Task 2 (7 points)\n","\n","We will implement [Conway's Game of Life](https://en.wikipedia.org/wiki/Conway's_Game_of_Life) in PyTorch.\n","\n","![img](https://cdn.tutsplus.com/gamedev/authors/legacy/Stephane%20Beniak/2012/09/11/Preview_Image.png)\n","\n","In case you skipped the above hyperlink, here is the algorithm:\n","* You have a 2D grid of cells, where each cell is \"alive\" or \"dead\" (has a value of `1` or `0` respectively).\n","* At each step in time, the so-called \"generation update\" happens:\n","  * any alive cell that has 2 or 3 alive neighbors survives, otherwise (0, 1 or 4+ neighbors) it dies;\n","  * any dead cell with exactly 3 alive neighbors becomes alive.\n","\n","You are given a (slow) reference implementation of the generation update. Your task is to convert it to PyTorch (faster). Avoid datatype conversions, and, as always, remember to not use loops over tensor elements etc., just PyTorch operations."]},{"cell_type":"code","metadata":{"id":"JD3FAyY1FHgk"},"source":["def game_of_life_update_reference(alive_map):\n","    \"\"\"\n","    Game of Life update function (in-place).\n","    \n","    alive_map:\n","        `numpy.ndarray`, ndim == 2, dtype == `numpy.int64`\n","        The game map containing 0s (dead) an 1s (alive).\n","    \"\"\"\n","    # Count neighbours for each cell with convolution\n","    num_alive_neighbors = np.zeros_like(alive_map)\n","    h, w = alive_map.shape\n","\n","    for row in range(h):\n","        for col in range(w):\n","            for row_d in range(-1, 2):\n","                for col_d in range(-1, 2):\n","                    if row_d == col_d == 0:\n","                        continue\n","                    if 0 <= row + row_d < h and 0 <= col + col_d < w:\n","                        num_alive_neighbors[row, col] += alive_map[row + row_d, col + col_d]\n","    \n","    # Apply game rules\n","    new_alive_map = np.empty_like(alive_map)\n","    for row in range(h):\n","        for col in range(w):\n","            born = num_alive_neighbors[row, col] == 3 and alive_map[row, col] == 0\n","            survived = num_alive_neighbors[row, col] in (2,3) and alive_map[row, col] == 1\n","            new_alive_map[row, col] = born or survived\n","    \n","    # Output the result\n","    np.copyto(alive_map, new_alive_map)"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"wK8f1HMTFHgv"},"source":["for _ in range(10):\n","    # Generate a random initial map\n","    alive_map_numpy = np.random.choice([0, 1], p=(0.5, 0.5), size=(100, 100)).astype(np.int64)\n","    alive_map_torch = torch.from_numpy(alive_map_numpy).clone()\n","\n","    game_of_life_update_reference(alive_map_numpy)\n","    part1_solution.game_of_life_update_torch(alive_map_torch)\n","\n","    # Results must be identical\n","    assert np.allclose(alive_map_torch.numpy(), alive_map_numpy), \\\n","        \"Your PyTorch implementation doesn't match `game_of_life_update_reference`.\"\n","\n","print(\"Task 2: well done!\")"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"d3Q6vQ7lFHgz"},"source":["animation = Animation(monochrome=True)\n","\n","# Initialize game field\n","np.random.seed(666)\n","alive_map = np.random.choice([0, 1], size=(100, 100)).astype(np.int64)\n","alive_map = torch.from_numpy(alive_map)\n","\n","for _ in range(101):\n","    animation.add_image((alive_map * 255).byte().numpy()[:, :, None])\n","    part1_solution.game_of_life_update_torch(alive_map)\n","\n","animation.display()"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"scrolled":false,"id":"o2UeFAeYFHg4"},"source":["animation = Animation(monochrome=True)\n","\n","# A fun setup for your amusement\n","alive_map = np.arange(100) % 2 + np.zeros((100, 100), dtype=np.int64)\n","alive_map[48:52, 50] = 1\n","\n","alive_map = torch.from_numpy(alive_map)\n","\n","for _ in range(150):\n","    animation.add_image((alive_map * 255).byte().numpy()[:, :, None])\n","    part1_solution.game_of_life_update_torch(alive_map)\n","\n","animation.display()"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"Uqe3Uys0FHg8"},"source":["More fun with Game of Life: [video](https://www.youtube.com/watch?v=C2vgICfQawE)"]},{"cell_type":"markdown","metadata":{"id":"lhgyOraEFHg9"},"source":["### Task 3 (30 points)\n","\n","This task is to teach you PyTorch's autograd (automatic differentiation) functionality. So, this time, don't code your own backprop manually like in the assignment â„–1.\n","\n","You have to solve yet another character recognition problem: *notMNIST* dataset of 10 letters and ~14 000 train samples.\n","\n","For this, we ask you to build a multilayer perceptron (*i.e. a neural network of linear layers*) from scratch using **low-level** PyTorch interface.\n","\n","Requirements:\n","1. at least 82% validation accuracy,\n","1. at least 2 linear layers,\n","1. no convolutions,\n","1. use [softmax followed by categorical cross-entropy](https://gombru.github.io/2018/05/23/cross_entropy_loss/),\n","1. training and evaluation should in total **take at most 15 seconds** (roughly),\n","1. no GPU.\n","\n","Tips:\n","\n","* This is a much simpler problem than that in homework 1. So don't use the structures from there (`Sequential`, `.forward()` etc.), they will be an overkill here. We suggest that your `NeuralNet.predict()` consists of 5-7 lines.\n","* Pick random batches (either shuffle data before each epoch or sample each batch randomly).\n","* Do not initialize weights with zeros ([learn why](https://stats.stackexchange.com/questions/27112/danger-of-setting-all-initial-weights-to-zero-in-backpropagation)). Gaussian noise with small variance will do.\n","* 50 hidden neurons and a sigmoid nonlinearity will do for a start. Many ways to improve.\n","* To improve accuracy, consider changing layers' sizes, nonlinearities, optimization parameters, weights initialization.\n","\n","Happy googling!"]},{"cell_type":"code","metadata":{"scrolled":true,"id":"IBQ8Zz9rFHg9"},"source":["# Download and initialize dataset\n","letters = 'ABCDEFGHIJ'\n","X_train, y_train, X_val, y_val = map(torch.tensor, load_notmnist(letters=letters))\n","X_train.squeeze_()\n","X_val.squeeze_();"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"UGgRCZtDFHhD"},"source":["# Display a part of the dataset\n","fig, axarr = plt.subplots(2, 10, figsize=(10, 2))\n","\n","for idx, ax in enumerate(axarr.ravel()):\n","    ax.imshow(X_train[idx], cmap='gray')\n","    ax.axis('off')\n","    ax.set_title(letters[y_train[idx]])\n","\n","fig.suptitle(\"Example ground truth labels\", y=1.08)\n","fig.tight_layout();"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"7yUp8x9MFHhH"},"source":["# Initialize the neural net\n","np.random.seed(666)\n","torch.manual_seed(666)\n","\n","model = part1_solution.NeuralNet()"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"a4LwAV5nfFtY"},"source":["%%time\n","torch.set_num_threads(1)\n","\n","# Train\n","part1_solution.train_on_notmnist(model, X_train, y_train, X_val, y_val)"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"dE00xTMEjlSo"},"source":["# Run it on some validation samples\n","example_batch = (torch.arange(20) + 1) * 31\n","_, example_batch_predictions = model.predict(X_val[example_batch]).max(1)\n","\n","fig, axarr = plt.subplots(2, 10, figsize=(10, 2))\n","\n","for idx, ax in enumerate(axarr.ravel()):\n","    ax.imshow(X_val[example_batch[idx]], cmap='gray')\n","    ax.axis('off')\n","    ax.set_title(letters[example_batch_predictions[idx]])\n","\n","fig.suptitle(\"Example predictions\", y=1.08)\n","fig.tight_layout();"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"rIIpwma6FHhb"},"source":["# Run it on all data, compute accuracies\n","train_accuracy = part1_solution.accuracy(model, X_train, y_train) * 100\n","val_accuracy = part1_solution.accuracy(model, X_val, y_val) * 100\n","print(\"Training accuracy: %.2f, validation accuracy: %.2f\" % (train_accuracy, val_accuracy))\n","\n","assert val_accuracy >= 82.0, \"You have to do better\"\n","print(\"Task 3: well done!\")"],"execution_count":null,"outputs":[]}]}[m
\ No newline at end of file[m
[32m+[m[32m{[m
[32m+[m[32m "cells": [[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "markdown",[m
[32m+[m[32m   "metadata": {[m
[32m+[m[32m    "id": "YJWxXWJlFHfk"[m
[32m+[m[32m   },[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "# Homework 2\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "This assignment is to help you get used to PyTorch (and to improve your googling skills).\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "If this is your first PyTorch experience, you may want to [start here](https://pytorch.org/tutorials/).\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "While learning PyTorch, you will have lots of questions, like\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "* how to choose between `.sqrt()` and `.sqrt_()`,\n",[m
[32m+[m[32m    "* when to use `.view()` and how is it different from `.reshape()`,\n",[m
[32m+[m[32m    "* which `dtype` to use etc.\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "To find the answers, you are expected to google a lot and to refer to [documentation](https://pytorch.org/docs/stable/index.html). Quick documentation on functions and modules is available with `?` and `help()`, like so:\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "```python\n",[m
[32m+[m[32m    "help(torch.sqrt)\n",[m
[32m+[m[32m    "```\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "```python\n",[m
[32m+[m[32m    "# to close the help bar, press `Esc` or `q`\n",[m
[32m+[m[32m    "?torch.cat\n",[m
[32m+[m[32m    "```\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "In this assignment, <font color=\"red\">**you are NOT ALLOWED to:**</font>\n",[m
[32m+[m[32m    "* use NumPy, SciPy or any other tensor library except PyTorch;\n",[m
[32m+[m[32m    "* emulate PyTorch tensors (that are used for large arrays of numbers) with lists or tuples;\n",[m
[32m+[m[32m    "* emulate any tensor functionality with other libraries/loops/indexing if it's directly native to PyTorch. Example:\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "```python\n",[m
[32m+[m[32m    "x = torch.rand(1_000_000)\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "# Wrong: slow and unreadable\n",[m
[32m+[m[32m    "for idx in range(x.numel()):\n",[m
[32m+[m[32m    "    x[idx] = math.sqrt(x[idx])\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "# Correct\n",[m
[32m+[m[32m    "x.sqrt_()\n",[m
[32m+[m[32m    "```"[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "markdown",[m
[32m+[m[32m   "metadata": {[m
[32m+[m[32m    "id": "TWSHyGLvFHfl"[m
[32m+[m[32m   },[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "## Part 1 (40 points total)\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "**In this part only**, you are <font color=\"red\">**NOT ALLOWED**</font> to use any PyTorch submodules, including\n",[m
[32m+[m[32m    "* `torch.nn`,\n",[m
[32m+[m[32m    "* `torch.nn.functional` (in general, try to always avoid using it),\n",[m
[32m+[m[32m    "* `torch.optim`,\n",[m
[32m+[m[32m    "* `torch.utils.data`,\n",[m
[32m+[m[32m    "* `torch.distributions`...\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "Instead, use only PyTorch core functions, such as `torch.avg_pool1d(x)`, `torch.conv2d` or `torch.no_grad()`. Where possible, use special operators syntax (e.g. `x @ y`, `x += 17`, `x[None]`) or tensor methods (e.g. `x.to(y)`, `x.relu()`, `x.copy_(y)`).\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "<br>\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "**FAQ**\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "<details>\n",[m
[32m+[m[32m    "<summary><i>Hey look what's wrong with <code>torch.nn.functional</code>? I've always used it! It's in all the tutorials!</i></summary>\n",[m
[32m+[m[32m    "<ul>\n",[m
[32m+[m[32m    "<li>A huge portion of its functions are in PyTorch core. For example, there are <code>torch.max_pool1d_with_indices</code>, <code>torch.pdist</code>, <code>torch.batch_norm</code> etc.\n",[m
[32m+[m[32m    "<li>Many parts of it, like <code>torch.nn.functional.tanh</code>, are explicitly deprecated.\n",[m
[32m+[m[32m    "<li>In general, given the tendency of migrating <code>torch.nn.functional.*</code> into <code>torch.*</code>, I have a strong impression that they will soon deprecate the whole submodule (but that's just my hypothesis).\n",[m
[32m+[m[32m    "<li><a href=\"https://discuss.pytorch.org/t/how-to-choose-between-torch-nn-functional-and-torch-nn-module/2800\">It's a</a> frequent <a href=\"https://www.reddit.com/r/pytorch/comments/afy3rt/torchnnfunctional/\">source</a> of <a href=\"https://discuss.pytorch.org/t/whats-the-difference-between-torch-nn-functional-and-torch-nn/681\">confusion</a>, especially for newbies.\n",[m
[32m+[m[32m    "<li>It clutters the code. <code>x.softmax()</code> and <code>torch.softmax(x)</code> are better than <code>torch.nn.functional.softmax(x)</code> and <code>F.softmax(x)</code>.\n",[m
[32m+[m[32m    "</ul>\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "Though I have to admit you can't avoid it at all, e.g. there are unique <code>torch.nn.functional.triplet_margin_loss</code> and <code>torch.nn.functional.softmin</code>. But in this assignment, you can. ðŸ˜‰\n",[m
[32m+[m[32m    "</details>\n"[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "code",[m
[32m+[m[32m   "execution_count": null,[m
[32m+[m[32m   "metadata": {[m
[32m+[m[32m    "id": "cvVEGPdPFHf4"[m
[32m+[m[32m   },[m
[32m+[m[32m   "outputs": [],[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "# Determine the locations of auxiliary libraries and datasets.\n",[m
[32m+[m[32m    "# `AUX_DATA_ROOT` is where 'notmnist.py', 'animation.py' and 'tiny-imagenet-2020.zip' are.\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "# Detect if we are in Google Colaboratory\n",[m
[32m+[m[32m    "try:\n",[m
[32m+[m[32m    "    import google.colab\n",[m
[32m+[m[32m    "    IN_COLAB = True\n",[m
[32m+[m[32m    "except ImportError:\n",[m
[32m+[m[32m    "    IN_COLAB = False\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "from pathlib import Path\n",[m
[32m+[m[32m    "if IN_COLAB:\n",[m
[32m+[m[32m    "    google.colab.drive.mount(\"/content/drive\")\n",[m
[32m+[m[32m    "    \n",[m
[32m+[m[32m    "    # Change this if you created the shortcut in a different location\n",[m
[32m+[m[32m    "    AUX_DATA_ROOT = Path(\"/content/drive/My Drive/Deep Learning 2021 -- Home Assignment 2\")\n",[m
[32m+[m[32m    "    \n",[m
[32m+[m[32m    "    assert AUX_DATA_ROOT.is_dir(), \"Have you forgot to 'Add a shortcut to Drive'?\"\n",[m
[32m+[m[32m    "    \n",[m
[32m+[m[32m    "    import sys\n",[m
[32m+[m[32m    "    sys.path.append(str(AUX_DATA_ROOT))\n",[m
[32m+[m[32m    "else:\n",[m
[32m+[m[32m    "    AUX_DATA_ROOT = Path(\".\")"[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "code",[m
[32m+[m[32m   "execution_count": null,[m
[32m+[m[32m   "metadata": {[m
[32m+[m[32m    "id": "gfwKfy9OdubD"[m
[32m+[m[32m   },[m
[32m+[m[32m   "outputs": [],[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "# Imports\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "# 1. Libraries\n",[m
[32m+[m[32m    "import torch\n",[m
[32m+[m[32m    "import numpy as np               # results verification during grading\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "import matplotlib.pyplot as plt  # 2D plot in task 1\n",[m
[32m+[m[32m    "%matplotlib inline\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "# 2. Extra custom code for this assignment\n",[m
[32m+[m[32m    "from animation import Animation              # animations in task 2\n",[m
[32m+[m[32m    "# if animations don't work, try uncommenting this line:\n",[m
[32m+[m[32m    "from animation import AnimationMJPG as Animation\n",[m
[32m+[m[32m    "from notmnist import load_notmnist           # dataset for task 3\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "# 3. Your solution\n",[m
[32m+[m[32m    "%load_ext autoreload\n",[m
[32m+[m[32m    "%autoreload 1\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "%aimport part1_solution"[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "markdown",[m
[32m+[m[32m   "metadata": {[m
[32m+[m[32m    "id": "043KDbWVFHgT"[m
[32m+[m[32m   },[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "### Task 1 (3 points)\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "$\\rho(\\theta)$ is defined in the polar coordinate system:\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "$$\\rho(\\theta) = (1 + 0.9 \\cdot \\cos{8\\theta} ) \\cdot (1 + 0.1 \\cdot \\cos{24\\theta}) \\cdot (0.9 + 0.05 \\cdot \\cos {200\\theta}) \\cdot (1 + \\sin{\\theta})$$\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "1. Create a **64-bit floating point** regular grid of 1000 values of $\\theta$ between $-\\pi$ and $\\pi$.\n",[m
[32m+[m[32m    "2. Compute $\\rho(\\theta)$ at these points.\n",[m
[32m+[m[32m    "3. Convert the result into Cartesian coordinates ([see here how](http://www.mathsisfun.com/polar-cartesian-coordinates.html))."[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "code",[m
[32m+[m[32m   "execution_count": null,[m
[32m+[m[32m   "metadata": {[m
[32m+[m[32m    "id": "iWhKZT6zFHgV"[m
[32m+[m[32m   },[m
[32m+[m[32m   "outputs": [],[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "x, y = part1_solution.get_rho()"[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "code",[m
[32m+[m[32m   "execution_count": null,[m
[32m+[m[32m   "metadata": {[m
[32m+[m[32m    "id": "nyGT0_y8FHga"[m
[32m+[m[32m   },[m
[32m+[m[32m   "outputs": [],[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "# Run this cell and make sure the plot is correct\n",[m
[32m+[m[32m    "plt.figure(figsize=(6,6))\n",[m
[32m+[m[32m    "plt.fill(x, y, color='green')\n",[m
[32m+[m[32m    "plt.grid()"[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "code",[m
[32m+[m[32m   "execution_count": null,[m
[32m+[m[32m   "metadata": {[m
[32m+[m[32m    "id": "NRQuLaygFHgf"[m
[32m+[m[32m   },[m
[32m+[m[32m   "outputs": [],[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "assert \\\n",[m
[32m+[m[32m    "    np.allclose(x.sum(), -1.9854999999997989, atol=1e-4) and \\\n",[m
[32m+[m[32m    "    np.allclose(y.mean(), 0.44955, atol=1e-4), \\\n",[m
[32m+[m[32m    "    \"Task 1: you've made an error somewhere\"\n",[m
[32m+[m[32m    "print(\"Task 1: well done!\")"[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "markdown",[m
[32m+[m[32m   "metadata": {[m
[32m+[m[32m    "id": "Dwk1jMA7FHgj"[m
[32m+[m[32m   },[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "### Task 2 (7 points)\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "We will implement [Conway's Game of Life](https://en.wikipedia.org/wiki/Conway's_Game_of_Life) in PyTorch.\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "![img](https://cdn.tutsplus.com/gamedev/authors/legacy/Stephane%20Beniak/2012/09/11/Preview_Image.png)\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "In case you skipped the above hyperlink, here is the algorithm:\n",[m
[32m+[m[32m    "* You have a 2D grid of cells, where each cell is \"alive\" or \"dead\" (has a value of `1` or `0` respectively).\n",[m
[32m+[m[32m    "* At each step in time, the so-called \"generation update\" happens:\n",[m
[32m+[m[32m    "  * any alive cell that has 2 or 3 alive neighbors survives, otherwise (0, 1 or 4+ neighbors) it dies;\n",[m
[32m+[m[32m    "  * any dead cell with exactly 3 alive neighbors becomes alive.\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "You are given a (slow) reference implementation of the generation update. Your task is to convert it to PyTorch (faster). Avoid datatype conversions, and, as always, remember to not use loops over tensor elements etc., just PyTorch operations."[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "code",[m
[32m+[m[32m   "execution_count": null,[m
[32m+[m[32m   "metadata": {[m
[32m+[m[32m    "id": "JD3FAyY1FHgk"[m
[32m+[m[32m   },[m
[32m+[m[32m   "outputs": [],[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "def game_of_life_update_reference(alive_map):\n",[m
[32m+[m[32m    "    \"\"\"\n",[m
[32m+[m[32m    "    Game of Life update function (in-place).\n",[m
[32m+[m[32m    "    \n",[m
[32m+[m[32m    "    alive_map:\n",[m
[32m+[m[32m    "        `numpy.ndarray`, ndim == 2, dtype == `numpy.int64`\n",[m
[32m+[m[32m    "        The game map containing 0s (dead) an 1s (alive).\n",[m
[32m+[m[32m    "    \"\"\"\n",[m
[32m+[m[32m    "    # Count neighbours for each cell with convolution\n",[m
[32m+[m[32m    "    num_alive_neighbors = np.zeros_like(alive_map)\n",[m
[32m+[m[32m    "    h, w = alive_map.shape\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "    for row in range(h):\n",[m
[32m+[m[32m    "        for col in range(w):\n",[m
[32m+[m[32m    "            for row_d in range(-1, 2):\n",[m
[32m+[m[32m    "                for col_d in range(-1, 2):\n",[m
[32m+[m[32m    "                    if row_d == col_d == 0:\n",[m
[32m+[m[32m    "                        continue\n",[m
[32m+[m[32m    "                    if 0 <= row + row_d < h and 0 <= col + col_d < w:\n",[m
[32m+[m[32m    "                        num_alive_neighbors[row, col] += alive_map[row + row_d, col + col_d]\n",[m
[32m+[m[32m    "    \n",[m
[32m+[m[32m    "    # Apply game rules\n",[m
[32m+[m[32m    "    new_alive_map = np.empty_like(alive_map)\n",[m
[32m+[m[32m    "    for row in range(h):\n",[m
[32m+[m[32m    "        for col in range(w):\n",[m
[32m+[m[32m    "            born = num_alive_neighbors[row, col] == 3 and alive_map[row, col] == 0\n",[m
[32m+[m[32m    "            survived = num_alive_neighbors[row, col] in (2,3) and alive_map[row, col] == 1\n",[m
[32m+[m[32m    "            new_alive_map[row, col] = born or survived\n",[m
[32m+[m[32m    "    \n",[m
[32m+[m[32m    "    # Output the result\n",[m
[32m+[m[32m    "    np.copyto(alive_map, new_alive_map)"[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "code",[m
[32m+[m[32m   "execution_count": null,[m
[32m+[m[32m   "metadata": {[m
[32m+[m[32m    "id": "wK8f1HMTFHgv"[m
[32m+[m[32m   },[m
[32m+[m[32m   "outputs": [],[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "for _ in range(10):\n",[m
[32m+[m[32m    "    # Generate a random initial map\n",[m
[32m+[m[32m    "    alive_map_numpy = np.random.choice([0, 1], p=(0.5, 0.5), size=(100, 100)).astype(np.int64)\n",[m
[32m+[m[32m    "    alive_map_torch = torch.from_numpy(alive_map_numpy).clone()\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "    game_of_life_update_reference(alive_map_numpy)\n",[m
[32m+[m[32m    "    part1_solution.game_of_life_update_torch(alive_map_torch)\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "    # Results must be identical\n",[m
[32m+[m[32m    "    assert np.allclose(alive_map_torch.numpy(), alive_map_numpy), \\\n",[m
[32m+[m[32m    "        \"Your PyTorch implementation doesn't match `game_of_life_update_reference`.\"\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "print(\"Task 2: well done!\")"[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "code",[m
[32m+[m[32m   "execution_count": null,[m
[32m+[m[32m   "metadata": {[m
[32m+[m[32m    "id": "d3Q6vQ7lFHgz"[m
[32m+[m[32m   },[m
[32m+[m[32m   "outputs": [],[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "animation = Animation(monochrome=True)\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "# Initialize game field\n",[m
[32m+[m[32m    "np.random.seed(666)\n",[m
[32m+[m[32m    "alive_map = np.random.choice([0, 1], size=(100, 100)).astype(np.int64)\n",[m
[32m+[m[32m    "alive_map = torch.from_numpy(alive_map)\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "for _ in range(101):\n",[m
[32m+[m[32m    "    animation.add_image((alive_map * 255).byte().numpy()[:, :, None])\n",[m
[32m+[m[32m    "    part1_solution.game_of_life_update_torch(alive_map)\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "animation.display()"[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "code",[m
[32m+[m[32m   "execution_count": null,[m
[32m+[m[32m   "metadata": {[m
[32m+[m[32m    "id": "o2UeFAeYFHg4",[m
[32m+[m[32m    "scrolled": false[m
[32m+[m[32m   },[m
[32m+[m[32m   "outputs": [],[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "animation = Animation(monochrome=True)\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "# A fun setup for your amusement\n",[m
[32m+[m[32m    "alive_map = np.arange(100) % 2 + np.zeros((100, 100), dtype=np.int64)\n",[m
[32m+[m[32m    "alive_map[48:52, 50] = 1\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "alive_map = torch.from_numpy(alive_map)\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "for _ in range(150):\n",[m
[32m+[m[32m    "    animation.add_image((alive_map * 255).byte().numpy()[:, :, None])\n",[m
[32m+[m[32m    "    part1_solution.game_of_life_update_torch(alive_map)\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "animation.display()"[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "markdown",[m
[32m+[m[32m   "metadata": {[m
[32m+[m[32m    "id": "Uqe3Uys0FHg8"[m
[32m+[m[32m   },[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "More fun with Game of Life: [video](https://www.youtube.com/watch?v=C2vgICfQawE)"[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "markdown",[m
[32m+[m[32m   "metadata": {[m
[32m+[m[32m    "id": "lhgyOraEFHg9"[m
[32m+[m[32m   },[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "### Task 3 (30 points)\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "This task is to teach you PyTorch's autograd (automatic differentiation) functionality. So, this time, don't code your own backprop manually like in the assignment â„–1.\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "You have to solve yet another character recognition problem: *notMNIST* dataset of 10 letters and ~14 000 train samples.\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "For this, we ask you to build a multilayer perceptron (*i.e. a neural network of linear layers*) from scratch using **low-level** PyTorch interface.\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "Requirements:\n",[m
[32m+[m[32m    "1. at least 82% validation accuracy,\n",[m
[32m+[m[32m    "1. at least 2 linear layers,\n",[m
[32m+[m[32m    "1. no convolutions,\n",[m
[32m+[m[32m    "1. use [softmax followed by categorical cross-entropy](https://gombru.github.io/2018/05/23/cross_entropy_loss/),\n",[m
[32m+[m[32m    "1. training and evaluation should in total **take at most 15 seconds** (roughly),\n",[m
[32m+[m[32m    "1. no GPU.\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "Tips:\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "* This is a much simpler problem than that in homework 1. So don't use the structures from there (`Sequential`, `.forward()` etc.), they will be an overkill here. We suggest that your `NeuralNet.predict()` consists of 5-7 lines.\n",[m
[32m+[m[32m    "* Pick random batches (either shuffle data before each epoch or sample each batch randomly).\n",[m
[32m+[m[32m    "* Do not initialize weights with zeros ([learn why](https://stats.stackexchange.com/questions/27112/danger-of-setting-all-initial-weights-to-zero-in-backpropagation)). Gaussian noise with small variance will do.\n",[m
[32m+[m[32m    "* 50 hidden neurons and a sigmoid nonlinearity will do for a start. Many ways to improve.\n",[m
[32m+[m[32m    "* To improve accuracy, consider changing layers' sizes, nonlinearities, optimization parameters, weights initialization.\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "Happy googling!"[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "code",[m
[32m+[m[32m   "execution_count": null,[m
[32m+[m[32m   "metadata": {[m
[32m+[m[32m    "id": "IBQ8Zz9rFHg9",[m
[32m+[m[32m    "scrolled": true[m
[32m+[m[32m   },[m
[32m+[m[32m   "outputs": [],[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "# Download and initialize dataset\n",[m
[32m+[m[32m    "letters = 'ABCDEFGHIJ'\n",[m
[32m+[m[32m    "X_train, y_train, X_val, y_val = map(torch.tensor, load_notmnist(letters=letters))\n",[m
[32m+[m[32m    "X_train.squeeze_()\n",[m
[32m+[m[32m    "X_val.squeeze_();"[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "code",[m
[32m+[m[32m   "execution_count": null,[m
[32m+[m[32m   "metadata": {[m
[32m+[m[32m    "id": "UGgRCZtDFHhD"[m
[32m+[m[32m   },[m
[32m+[m[32m   "outputs": [],[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "# Display a part of the dataset\n",[m
[32m+[m[32m    "fig, axarr = plt.subplots(2, 10, figsize=(10, 2))\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "for idx, ax in enumerate(axarr.ravel()):\n",[m
[32m+[m[32m    "    ax.imshow(X_train[idx], cmap='gray')\n",[m
[32m+[m[32m    "    ax.axis('off')\n",[m
[32m+[m[32m    "    ax.set_title(letters[y_train[idx]])\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "fig.suptitle(\"Example ground truth labels\", y=1.08)\n",[m
[32m+[m[32m    "fig.tight_layout();"[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "code",[m
[32m+[m[32m   "execution_count": null,[m
[32m+[m[32m   "metadata": {[m
[32m+[m[32m    "id": "7yUp8x9MFHhH"[m
[32m+[m[32m   },[m
[32m+[m[32m   "outputs": [],[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "# Initialize the neural net\n",[m
[32m+[m[32m    "np.random.seed(666)\n",[m
[32m+[m[32m    "torch.manual_seed(666)\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "model = part1_solution.NeuralNet()"[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "code",[m
[32m+[m[32m   "execution_count": null,[m
[32m+[m[32m   "metadata": {[m
[32m+[m[32m    "id": "a4LwAV5nfFtY"[m
[32m+[m[32m   },[m
[32m+[m[32m   "outputs": [],[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "%%time\n",[m
[32m+[m[32m    "torch.set_num_threads(1)\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "# Train\n",[m
[32m+[m[32m    "part1_solution.train_on_notmnist(model, X_train, y_train, X_val, y_val)"[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "code",[m
[32m+[m[32m   "execution_count": null,[m
[32m+[m[32m   "metadata": {[m
[32m+[m[32m    "id": "dE00xTMEjlSo"[m
[32m+[m[32m   },[m
[32m+[m[32m   "outputs": [],[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "# Run it on some validation samples\n",[m
[32m+[m[32m    "example_batch = (torch.arange(20) + 1) * 31\n",[m
[32m+[m[32m    "_, example_batch_predictions = model.predict(X_val[example_batch]).max(1)\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "fig, axarr = plt.subplots(2, 10, figsize=(10, 2))\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "for idx, ax in enumerate(axarr.ravel()):\n",[m
[32m+[m[32m    "    ax.imshow(X_val[example_batch[idx]], cmap='gray')\n",[m
[32m+[m[32m    "    ax.axis('off')\n",[m
[32m+[m[32m    "    ax.set_title(letters[example_batch_predictions[idx]])\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "fig.suptitle(\"Example predictions\", y=1.08)\n",[m
[32m+[m[32m    "fig.tight_layout();"[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "code",[m
[32m+[m[32m   "execution_count": null,[m
[32m+[m[32m   "metadata": {[m
[32m+[m[32m    "id": "rIIpwma6FHhb"[m
[32m+[m[32m   },[m
[32m+[m[32m   "outputs": [],[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "# Run it on all data, compute accuracies\n",[m
[32m+[m[32m    "train_accuracy = part1_solution.accuracy(mod